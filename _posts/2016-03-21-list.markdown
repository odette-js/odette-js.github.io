---
layout: post
title:  "List"
date:   2016-03-20 12:35:34 -0500
categories: API
author: Michael McLaughlin
permalink: /api/v0/list
---


<p>Lists are an abstraction for arrays. They handle adding and removing items on arrays, and doing other fancy things that parody many of the methods available in libraries such as underscore. To create a list, simply call the List method on the factories object. Below is a list of numbers being created.</p>
<pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5]);</code></pre>
<ul class="list">
    <li class="left clear-left">
        <a data-custom="expands-next" data-target=".nested-list-collapser">Methods</a>
        <div class="nested-list-collapser" data-duration="300">
            <ul class="list nested-list">
                <li class="left clear-left"><a href="#methods_add">add</a></li>
                <li class="left clear-left"><a href="#methods_call">call</a></li>
                <li class="left clear-left"><a href="#methods_concat">concat</a></li>
                <li class="left clear-left"><a href="#methods_count">count</a></li>
                <li class="left clear-left"><a href="#methods_countFrom">countFrom</a></li>
                <li class="left clear-left"><a href="#methods_countTo">countTo</a></li>
                <li class="left clear-left"><a href="#methods_cycle">cycle</a></li>
                <li class="left clear-left"><a href="#methods_duff">duff</a></li>
                <li class="left clear-left"><a href="#methods_duffRight">duffRight</a></li>
                <li class="left clear-left"><a href="#methods_each">each</a></li>
                <li class="left clear-left"><a href="#methods_eachCall">eachCall</a></li>
                <li class="left clear-left"><a href="#methods_eachCallRight">eachCallRight</a></li>
                <li class="left clear-left"><a href="#methods_eachRight">eachRight</a></li>
                <li class="left clear-left"><a href="#methods_empty">empty</a></li>
                <li class="left clear-left"><a href="#methods_eq">eq</a></li>
                <li class="left clear-left"><a href="#methods_filter">filter</a></li>
                <li class="left clear-left"><a href="#methods_find">find</a></li>
                <li class="left clear-left"><a href="#methods_findLast">findLast</a></li>
                <li class="left clear-left"><a href="#methods_findLastWhere">findLastWhere</a></li>
                <li class="left clear-left"><a href="#methods_findWhere">findWhere</a></li>
                <li class="left clear-left"><a href="#methods_first">first</a></li>
                <li class="left clear-left"><a href="#methods_flatten">flatten</a></li>
                <li class="left clear-left"><a href="#methods_foldl">foldl</a></li>
                <li class="left clear-left"><a href="#methods_foldr">foldr</a></li>
                <li class="left clear-left"><a href="#methods_forEach">forEach</a></li>
                <li class="left clear-left"><a href="#methods_forEachRight">forEachRight</a></li>
                <li class="left clear-left"><a href="#methods_gather">gather</a></li>
                <li class="left clear-left"><a href="#methods_has">has</a></li>
                <li class="left clear-left"><a href="#methods_index">index</a></li>
                <li class="left clear-left"><a href="#methods_indexOf">indexOf</a></li>
                <li class="left clear-left"><a href="#methods_insertAt">insertAt</a></li>
                <li class="left clear-left"><a href="#methods_join">join</a></li>
                <li class="left clear-left"><a href="#methods_last">last</a></li>
                <li class="left clear-left"><a href="#methods_length">length</a></li>
                <li class="left clear-left"><a href="#methods_map">map</a></li>
                <li class="left clear-left"><a href="#methods_mapCall">mapCall</a></li>
                <li class="left clear-left"><a href="#methods_merge">merge</a></li>
                <li class="left clear-left"><a href="#methods_pluck">pluck</a></li>
                <li class="left clear-left"><a href="#methods_pop">pop</a></li>
                <li class="left clear-left"><a href="#methods_posit">posit</a></li>
                <li class="left clear-left"><a href="#methods_push">push</a></li>
                <li class="left clear-left"><a href="#methods_range">range</a></li>
                <li class="left clear-left"><a href="#methods_reduce">reduce</a></li>
                <li class="left clear-left"><a href="#methods_remove">remove</a></li>
                <li class="left clear-left"><a href="#methods_removeAt">removeAt</a></li>
                <li class="left clear-left"><a href="#methods_reset">reset</a></li>
                <li class="left clear-left"><a href="#methods_results">results</a></li>
                <li class="left clear-left"><a href="#methods_reverse">reverse</a></li>
                <li class="left clear-left"><a href="#methods_shift">shift</a></li>
                <li class="left clear-left"><a href="#methods_sort">sort</a></li>
                <li class="left clear-left"><a href="#methods_splice">splice</a></li>
                <li class="left clear-left"><a href="#methods_toJSON">toJSON</a></li>
                <li class="left clear-left"><a href="#methods_toString">toString</a></li>
                <li class="left clear-left"><a href="#methods_uncycle">uncycle</a></li>
                <li class="left clear-left"><a href="#methods_unshift">unshift</a></li>
                <li class="left clear-left"><a href="#methods_unwrap">unwrap</a></li>
                <li class="left clear-left"><a href="#methods_where">where</a></li>
                <li class="left clear-left"><a href="#methods_whereNot">whereNot</a></li>
            </ul>
        </div>
    </li>
    <li class="left clear-left">
        <a href="javascript:void 0;">Augments</a>
        <ul class="list nested-list">
            <li class="left clear-left"><a href="/api/v0/model">Model</a></li>
            <li class="left clear-left"><a href="/api/v0/parent">Parent</a></li>
            <li class="left clear-left"><a href="/api/v0/events">Events</a></li>
            <li class="left clear-left"><a href="/api/v0/directive">Directive</a></li>
            <li class="left clear-left"><a href="/api/v0/extendable">Extendable</a></li>
        </ul>
    </li>
</ul>
<h4 id="methods" class="title-headline">Methods</h4>
<div id="methods_add">
    <h5 class="title-headline">#add</h5>
    <p>The add method is a combination of indexOf and push. First the list will check to see if it already has the object in question. If the list determines that it does not then it will push it onto the back of the list. If it does, it will simply ignore it. The list will return true or false based on whether or not the item was added to the list.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5]);
list.add(1); // false
list.add(6); // true</code></pre>
</div>
<div id="methods_call">
    <h5 class="title-headline">#call</h5>
    <p>The call method is used for calling a bunch of functions in sequence. If you have a list of functions, they can be called using the call method. Because List objects are not functions, the call method does not conflict. Pass something into the call method for it to be passed to each function. Only one argument is permitted.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([function () {
    // do something
}, handler2, function (a, b) {
    console.log(arguments);
}]);
list.call(1, 2); // logs [1]</code></pre>
</div>
<div id="methods_concat">
    <h5 class="title-headline">#concat</h5>
    <p>The concat method is simply a parody for concatonating lists directly onto the managed array. This call maps the arguments and unwraps any objects that are lists or that extend from lists as it maps.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([1, 2]);
var list2 = factories.List([5, 6]);
list.concat([3, 4], list2);
list.unwrap(); // [1, 2, 3, 4, 5, 6]</code></pre>
</div>
<div id="methods_count">
    <h5 class="title-headline">#count</h5>
    <p>The count method is a parody of the utility given count method which allows you to count items on the array, regardless of the length of the list.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5]);
var arra = [];
list.count(function (item, index, array) {
    while (array[index] === undefined && array.length <= index) {
        array.push(0);
    }
}, 3, 13);
list.unwrap(); // [0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0]</code></pre>
</div>
<div id="methods_countFrom">
    <h5 class="title-headline">#countFrom</h5>
    <p>The countFrom method is a convenience method for counting up along a subset of the list the method is called on. Instead of passing two numbers like the count method.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5, 6, 7]);
list.countFrom(function (item, index, list) {
    list.push(item);
}, 4); // [0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7]</code></pre>
</div>
<div id="methods_countTo">
    <h5 class="title-headline">#countTo</h5>
    <p>The countTo method is another convenience method for counting up along a subset of the list from 0.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5, 6, 7]);
list.countFrom(function (item, index, list) {
    list.push(item);
}, 4); // [0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3]</code></pre>
</div>
<div id="methods_cycle">
    <h5 class="title-headline">#cycle</h5>
    <p>The cycle method cycles items through the array, putting items after the index passed at the front of the array. The cycle method modifies the array in place.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5, 6, 7]);
list.cycle(2).unwrap(); // [2, 3, 4, 5, 6, 7, 0, 1]</code></pre>
</div>
<div id="methods_duff">
    <h5 class="title-headline">#duff</h5>
    <p>The duff method the closest thing to a for loop possible. It iterates through every item in the list that is present when the method is first called. While this method is exposed, it's parody, <a href="#methods_each">each</a>, is much more user friendly.</p>
    <pre class="code code-section"><code class="language-javascript">list.duff(function (item, index, array) {
    // exposes all items
});</code></pre>
</div>
<div id="methods_duffRight">
    <h5 class="title-headline">#duffRight</h5>
    <p>The duffRight method iterates over the array in reverse. It does not take into account the reversed property.</p>
    <pre class="code code-section"><code class="language-javascript">list.duffRight(function (item, index, array) {
    // exposes all items... in reverse
});</code></pre>
</div>
<div id="methods_each">
    <h5 class="title-headline">#each</h5>
    <p>The each method is a parody for duff and exposes each item on the list, in order, with each item's respective index.</p>
    <pre class="code code-section"><code class="language-javascript">list.each(function (value, index, array) {
    // exposes each item
});</code></pre>
</div>
<div id="methods_eachCall">
    <h5 class="title-headline">#eachCall</h5>
    <p>The eachCall method is a method that calls a singular method on a list of items. The method takes up to two arguments. The first is the key of the method to be called, and the second is a singular argument to be passed to each function call on the objects in the list.</p>
    <pre class="code code-section"><code class="language-javascript">var item = {
    method: function (arg) {
        console.log(arg, list.indexOf(this));
    }
};
var list = factories.List([item, item, item, item]);
list.eachCall('method', "a"); // logs "a", 0, "a", 1, "a", 2, "a", 3</code></pre>
</div>
<div id="methods_eachCallRight">
    <h5 class="title-headline">#eachCallRight</h5>
    <p>The eachCallRight method</p>
    <pre class="code code-section"><code class="language-javascript">var item = {
    method: function (arg) {
        console.log(arg, list.indexOf(this));
    }
};
var list = factories.List([item, item, item, item]);
list.eachCallRight('method', "a"); // logs "a", 3, "a", 2, "a", 1, "a", 0</code></pre>
</div>
<div id="methods_eachRight">
    <h5 class="title-headline">#eachRight</h5>
    <p>The eachRight method iterates over the array in reverse. It does not take into account the reversed property.</p>
    <pre class="code code-section"><code class="language-javascript">list.eachRight(function (item, index, array) {
    // exposes all items... in reverse
});</code></pre>
</div>
<div id="methods_empty">
    <h5 class="title-headline">#empty</h5>
    <p>The empty method simply replaces the array with a blank array.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([1, 2, 3, 4]);
list.unwrap(); // [1, 2, 3, 4]
list.empty();
list.unwrap(); // []</code></pre>
</div>
<div id="methods_eq">
    <h5 class="title-headline">#eq</h5>
    <p>The eq method can be passed a number or list of numbers to create another list with.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([5, 3, 2, 0, 4, 1]);
list.eq(3).unwrap(); // [0]
list.eq([3, 0, 1]).unwrap(); // [0, 5, 3]</code></pre>
</div>
<div id="methods_filter">
    <h5 class="title-headline">#filter</h5>
    <p>The filter method collects items on the list. Return a truthy value to keep the item in the next list that is created by the method.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([0, 1, 2, 3, 4, 5]);
list.filter(function (item) {
    return item % 2;
});</code></pre>
</div>
<div id="methods_find">
    <h5 class="title-headline">#find</h5>
    <p>The find method returns the first item that returns a truthy value.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([5, 3, 2, 0, 4, 1, 6]);
list.find(function (item, index) {
    return item * index > 10;
}); // 4</code></pre>
</div>
<div id="methods_findLast">
    <h5 class="title-headline">#findLast</h5>
    <p>The findLast method returns the first item that returns a truthy value starting from the last item.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([5, 3, 2, 0, 4, 1, 6]);
list.findLast(function (item, index) {
    return item * index > 10;
}); // 6</code></pre>
</div>
<div id="methods_findLastWhere">
    <h5 class="title-headline">#findLastWhere</h5>
    <p>The findLastWhere method returns the first object that matches the object passed in.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([{
    key: "notthevalue",
    unknown: "value0"
}, {
    key: "value",
    unknown: "value1"
}, {
    key: "value",
    unknown: "value2"
}]).findWhere({
    key: "value"
}); // { key:"value", unknown:"value1" }</code></pre>
</div>
<div id="methods_findLastWhere">
    <h5 class="title-headline">#findLastWhere</h5>
    <p>The findLastWhere method returns the last object that matches.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([{
    key: "notthevalue",
    unknown: "value0"
}, {
    key: "value",
    unknown: "value1"
}, {
    key: "value",
    unknown: "value2"
}]).findLastWhere({
    key: "value"
}); // { key:"value", unknown:"value2" }</code></pre>
</div>
<div id="methods_first">
    <h5 class="title-headline">#first</h5>
    <p>The first method is basically a parody of calling index and passing in 0.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([5, 3, 4, 2]);
list.first(); // 5</code></pre>
</div>
<div id="methods_flatten">
    <h5 class="title-headline">#flatten</h5>
    <p>The flatten method can take nested arrays and flatten them with a transformer.</p>
    <pre class="code code-section"><code class="language-javascript">var list = factories.List([[1, 5, 4], [[2], [[0], 3]]]);
list.flatten().unwrap();       // [1, 5, 4, [2], [[0], 3]]
list = factories.List([[1, 5, 4], [[2], [[0], 3]]]);
list.flatten(true).unwrap(); // [1, 5, 4, 2, 0, 3]
list = factories.List([[1, 5, 4], [[2], [[0], 3]]]);
list.flatten(true, function (items) {
    // exposure to each that will populate the list
}).unwrap(); // [1, 5, 4, 2, 0, 3]</code></pre>
</div>
<div id="methods_foldl">
    <h5 class="title-headline">#foldl</h5>
    <p>The foldl method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_foldr">
    <h5 class="title-headline">#foldr</h5>
    <p>The foldr method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_forEach">
    <h5 class="title-headline">#forEach</h5>
    <p>The forEach method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_forEachRight">
    <h5 class="title-headline">#forEachRight</h5>
    <p>The forEachRight method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_gather">
    <h5 class="title-headline">#gather</h5>
    <p>The gather method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_get">
    <h5 class="title-headline">#get</h5>
    <p>The get method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_has">
    <h5 class="title-headline">#has</h5>
    <p>The has method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_index">
    <h5 class="title-headline">#index</h5>
    <p>The index method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_indexOf">
    <h5 class="title-headline">#indexOf</h5>
    <p>The indexOf method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_insertAt">
    <h5 class="title-headline">#insertAt</h5>
    <p>The insertAt method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_join">
    <h5 class="title-headline">#join</h5>
    <p>The join method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_last">
    <h5 class="title-headline">#last</h5>
    <p>The last method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_length">
    <h5 class="title-headline">#length</h5>
    <p>The length method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_map">
    <h5 class="title-headline">#map</h5>
    <p>The map method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_mapCall">
    <h5 class="title-headline">#mapCall</h5>
    <p>The mapCall method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_merge">
    <h5 class="title-headline">#merge</h5>
    <p>The merge method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_pluck">
    <h5 class="title-headline">#pluck</h5>
    <p>The pluck method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_pop">
    <h5 class="title-headline">#pop</h5>
    <p>The pop method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_posit">
    <h5 class="title-headline">#posit</h5>
    <p>The posit method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_push">
    <h5 class="title-headline">#push</h5>
    <p>The push method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_range">
    <h5 class="title-headline">#range</h5>
    <p>The range method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_reduce">
    <h5 class="title-headline">#reduce</h5>
    <p>The reduce method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_register">
    <h5 class="title-headline">#register</h5>
    <p>The register method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_remove">
    <h5 class="title-headline">#remove</h5>
    <p>The remove method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_removeAt">
    <h5 class="title-headline">#removeAt</h5>
    <p>The removeAt method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_reset">
    <h5 class="title-headline">#reset</h5>
    <p>The reset method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_results">
    <h5 class="title-headline">#results</h5>
    <p>The results method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_reverse">
    <h5 class="title-headline">#reverse</h5>
    <p>The reverse method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_shift">
    <h5 class="title-headline">#shift</h5>
    <p>The shift method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_sort">
    <h5 class="title-headline">#sort</h5>
    <p>The sort method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_splice">
    <h5 class="title-headline">#splice</h5>
    <p>The splice method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_swapRegister">
    <h5 class="title-headline">#swapRegister</h5>
    <p>The swapRegister method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_toJSON">
    <h5 class="title-headline">#toJSON</h5>
    <p>The toJSON method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_toString">
    <h5 class="title-headline">#toString</h5>
    <p>The toString method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_uncycle">
    <h5 class="title-headline">#uncycle</h5>
    <p>The uncycle method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_unRegister">
    <h5 class="title-headline">#unRegister</h5>
    <p>The unRegister method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_unshift">
    <h5 class="title-headline">#unshift</h5>
    <p>The unshift method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_unwrap">
    <h5 class="title-headline">#unwrap</h5>
    <p>The unwrap method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_where">
    <h5 class="title-headline">#where</h5>
    <p>The where method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
<div id="methods_whereNot">
    <h5 class="title-headline">#whereNot</h5>
    <p>The whereNot method</p>
    <pre class="code code-section"><code class="language-javascript"></code></pre>
</div>
